#! /bin/sh /usr/share/dpatch/dpatch-run
## 01webdavmkcol.dpatch by  <az@debian.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: fix for #693521: nested mkcols

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' duplicity-0.6.20~/duplicity/backends/webdavbackend.py duplicity-0.6.20/duplicity/backends/webdavbackend.py
--- duplicity-0.6.20~/duplicity/backends/webdavbackend.py	2012-12-30 17:10:20.000000000 +1000
+++ duplicity-0.6.20/duplicity/backends/webdavbackend.py	2012-12-30 17:12:43.471036474 +1000
@@ -169,11 +169,8 @@
             del self.headers['Depth']
             # if the target collection does not exist, create it.
             if response.status == 404:
-                response.close()
-                log.Info("Directory '%s' being created." % self.directory)
-                response = self.request("MKCOL", self.directory)
-                log.Info("WebDAV MKCOL status: %s %s" % (response.status, response.reason))
-                response.close()
+                response.close() # otherwise next request fails with ResponseNotReady
+                self.makedir()
                 continue
             if response.status == 207:
                 document = response.read()
@@ -193,6 +190,32 @@
                 result.append(filename)
         return result
 
+    def makedir(self):
+        """Make (nested) directories on the server."""
+        dirs = self.directory.split("/")
+        # url causes directory to start with /, but it might be given 
+        # with or without trailing / (which is required)
+        if dirs[-1] == '':
+            dirs=dirs[0:-1]
+        for i in range(1,len(dirs)):
+            d="/".join(dirs[0:i+1])+"/"
+       
+            self.close() # or we get previous request's data or exception       
+            self.headers['Depth'] = "1"
+            response = self.request("PROPFIND", d)
+            del self.headers['Depth']
+
+            log.Info("Checking existence dir %s: %d" % (d, response.status))
+
+            if response.status == 404:
+                log.Info("Creating missing directory %s" % d)
+                self.close() # or we get previous request's data or exception   
+
+                res = self.request("MKCOL", d)
+                if res.status != 201:
+                    raise BackendException("WebDAV MKCOL %s failed: %s %s" % (d,res.status,res.reason))
+                self.close()
+
     def __taste_href(self, href):
         """
         Internal helper to taste the given href node and, if
